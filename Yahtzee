"""
Planner for Yahtzee
Simplifications:  only allow discard and roll, only score against upper level
"""

# Used to increase the timeout, if necessary
import codeskulptor

codeskulptor.set_timeout(20)

def gen_all_sequences(outcomes, length):
    """
    Iterative function that enumerates the set of all sequences of
    outcomes of given length.
    """
    
    answer_set = set([()])
    for dummy_idx in range(length):
        temp_set = set()
        for partial_sequence in answer_set:
            for item in outcomes:
                new_sequence = list(partial_sequence)
                new_sequence.append(item)
                temp_set.add(tuple(new_sequence))
        answer_set = temp_set
    return answer_set


def score(hand):
    """
    Compute the maximal score for a Yahtzee hand according to the
    upper section of the Yahtzee score card.

    hand: full yahtzee hand

    Returns an integer score 
    """
    
    sorted_list=sorted(hand)
    # print "sorted_list",sorted_list
    
    item_count = [sorted_list.count(dummy_item) 
                  for dummy_item in sorted_list]
    
    # print "item_count=",item_count
    
    product_list=[]
    
    for dummy_item in range(len(sorted_list)):
        product_list.append(sorted_list[dummy_item]*item_count[dummy_item])
                 
    
    final_list=[]
    
    for item in product_list:
        if item not in final_list:
            final_list.append(item)
    
    return max(final_list)


def expected_value(held_dice, num_die_sides, num_free_dice):
    """
    Compute the expected value based on held_dice given that there
    are num_free_dice to be rolled, each with num_die_sides.

    held_dice: dice that you will hold
    num_die_sides: number of sides on each die
    num_free_dice: number of dice to be rolled

    Returns a floating point expected value
    """
    
    outcomes=range(num_die_sides+1)
    outcomes=set(outcomes[1:])
    print "outcomes: ",outcomes
    
    rolls=gen_all_sequences(outcomes, num_free_dice)
    print "num_free_dice",num_free_dice 
    
    all_values=0
    
    for element in rolls:
        merge_list=list(element)+list(held_dice)
        all_values+=score(tuple(merge_list))
    
    value=float(all_values)/float(num_die_sides**(num_free_dice))
    
    return value


def gen_all_holds(hand):
    """
    Generate all possible choices of dice from hand to hold.

    hand: full yahtzee hand

    Returns a set of tuples, where each tuple is dice to hold
    """
    
    
    binary_counts =[bin(x)[2:].rjust(len(hand),'0') for x in range(2**len(hand))]

    power_set = set([()])
    for count in binary_counts:
        power_set.add(tuple([hand[i] for i in range(len(count))
                                     if count[i] == '1']))

    return power_set
    



def strategy(hand, num_die_sides):
    """
    Compute the hold that maximizes the expected value when the
    discarded dice are rolled.

    hand: full yahtzee hand
    num_die_sides: number of sides on each die

    Returns a tuple where the first element is the expected score and
    the second element is a tuple of the dice to hold
    """
    
    held_set=gen_all_holds(hand)
    
    final_value=0
    final_held=()
    
    for held_dice in held_set:
        num_free_dice=len(hand)-len(held_dice)
        value=expected_value(held_dice, num_die_sides, num_free_dice)
        if value>final_value:
            final_value=value
            final_held=held_dice
    
    print ""           
    return (final_value, final_held)


def run_example():
    """
    Compute the dice to hold and expected score for an example hand
    """
    num_die_sides = 6
    hand = (1,)
    hand_score, hold = strategy(hand, num_die_sides)
    print "Best strategy for hand", hand, "is to hold", hold, "with expected score", hand_score
    
    
run_example()


#import poc_holds_testsuite
#poc_holds_testsuite.run_suite(gen_all_holds)
                                       
    
    
    
"""
http://www.codeskulptor.org/#user39_objwpulz78_1.py
"""


